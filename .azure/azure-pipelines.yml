# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
  branches:
    include:
    - '*'

pool:
  vmImage: 'ubuntu-latest'

variables:
  goVersion: '1.14'           # second latest major.minor version
  goBuiltAppName: 'main'
  nodejsVersion: '12.x'       # latest LTS version
  dockerVersion: '19.03.12'   # latest major.minor version
  herokuRegistry: 'registry.heroku.com'
  herokuApp: 'exteross'
  branchMasterChanged: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/master') }}
  sessionDirectory: $(System.DefaultWorkingDirectory)/..

stages:
  - stage: build
    displayName: Build project
    jobs:
      - job: build
        displayName: Build project
        steps:
        - task: GoTool@0
          displayName: Prepare Go env
          inputs:
            version: '$(goVersion)'
        - script: export GO111MODULE=on && go get github.com/btnguyen2k/go-giter8/g8@v0.5.1
          displayName: Install go-giter8
        - script: |
            echo GOPATH: $GOPATH
            ls -la $GOPATH
            echo GOROOT: $GOROOT
            ls -la $GOROOT
            echo GOBIN: $GOBIN
            ls -la $GOBIN
        - task: NodeTool@0
          displayName: Prepare NodeJs env
          inputs:
            versionSpec: '$(nodejsVersion)'
        - task: DockerInstaller@0
          displayName: Prepare Docker CLI
          inputs:
            dockerVersion: '$(dockerVersion)'
            releaseType: 'stable'
        - script: |
            echo System.ArtifactsDirectory: $(System.ArtifactsDirectory)
            ls -la $(System.ArtifactsDirectory)
            echo System.DefaultWorkingDirectory: $(System.DefaultWorkingDirectory)
            ls -la $(System.DefaultWorkingDirectory)
            echo System.WorkFolder: $(System.WorkFolder)
            ls -la $(System.WorkFolder)

# variables:
#   GOBIN:  '$(GOPATH)/bin' # Go binaries path
#   GOROOT: '/usr/local/go1.11' # Go installation path
#   GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
#   modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

# steps:
# - script: |
#     mkdir -p '$(GOBIN)'
#     mkdir -p '$(GOPATH)/pkg'
#     mkdir -p '$(modulePath)'
#     shopt -s extglob
#     shopt -s dotglob
#     mv !(gopath) '$(modulePath)'
#     echo '##vso[task.prependpath]$(GOBIN)'
#     echo '##vso[task.prependpath]$(GOROOT)/bin'
#   displayName: 'Set up the Go workspace'

# - script: |
#     go version
#     go get -v -t -d ./...
#     if [ -f Gopkg.toml ]; then
#         curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
#         dep ensure
#     fi
#     go build -v .
#   workingDirectory: '$(modulePath)'
#   displayName: 'Get dependencies, then build'
